const admin = require("firebase-admin");
const functions = require("firebase-functions");
const { isValidString, isValidObject, isValidNumber } = require("../utils/validateInputs");

// üî• Charger les identifiants Firebase
const serviceAccount = require("../config/firebaseAdminSDK.json");

// ‚úÖ Initialisation Firebase avec cl√© de service
if (!admin.apps.length) {
  admin.initializeApp({
    credential: admin.credential.cert(serviceAccount),
    databaseURL: "https://tchoptime-2.firebaseio.com"
  });
}

const db = admin.firestore();

/**
 * ‚úÖ Fonction pour normaliser `stockChanges`
 * - Si `stockChanges` est un **tableau**, le convertir en **objet**
 */
const normalizeStockChanges = (stockChanges) => {
  if (Array.isArray(stockChanges)) {
    return stockChanges.reduce((acc, item) => {
      acc[item.ingredientId] = { quantity: item.quantity, isPurchase: item.isPurchase };
      return acc;
    }, {});
  }
  return stockChanges; // Garder le format original si d√©j√† correct
};
console.log("‚úÖ Test termin√© : Mise √† jour du stock valid√©e !");
exports.updateStock = functions.https.onRequest(async (req, res) => {
  try {
    console.log("üîç Donn√©es re√ßues :", req.body);

    const { userId, stockChanges } = req.body;
    const normalizedStockChanges = normalizeStockChanges(stockChanges);


    // ‚úÖ V√©rification des entr√©es utilisateur
    if (!isValidString(userId) || !isValidObject(normalizedStockChanges)) {
      console.error("‚ùå Param√®tres invalides :", { userId, stockChanges });
      return res.status(400).send({ success: false, message: "Param√®tres invalides" });
    }

    const stockRef = db.collection("users").doc(userId).collection("stock");

    for (const [ingredientId, { quantity, isPurchase }] of Object.entries(normalizedStockChanges)) {
      if (!isValidNumber(quantity)) continue;

      const ingredientRef = stockRef.doc(ingredientId);
      const docSnapshot = await ingredientRef.get();
      const currentQuantity = docSnapshot.exists ? docSnapshot.data().quantityAvailable : 0;
      const newQuantity = isPurchase ? currentQuantity + quantity : currentQuantity - quantity;

      await ingredientRef.set({ quantityAvailable: Math.max(newQuantity, 0) }, { merge: true });
      console.log(`‚úÖ Stock mis √† jour : ${ingredientId} ‚Üí ${Math.max(newQuantity, 0)}`);
    }

    res.status(200).send({ success: true, message: "Stock mis √† jour automatiquement" });
  } catch (error) {
    console.error("‚ùå Erreur mise √† jour stock :", error);
    res.status(500).send({ success: false, message: "Erreur serveur", error });
  }
});
